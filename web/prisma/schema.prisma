generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  ESCOLA_PROFESSOR
  ESCOLA_ADMIN
}

enum LessonType {
  GERAL
  EXERCICIOS
  REVISAO
  SIMULACAO
}

enum ContentType {
  MARKDOWN
  VIDEO
  INTERACTIVE_COMPONENT
  EXERCISE
  SIMULATION
  ASSESSMENT
}

enum ComponentType {
  SIMULACAO
  QUIZ
  DRAG_DROP
  CODE_EDITOR
  MATH_PLAYGROUND
  INTERACTIVE_GRAPH
  ANIMATION
}

model User {
  // nao mexer >
  id            String    @id @default(uuid()) @map("_id")
  name          String
  email         String    @unique
  password      String?
  emailVerified Boolean?
  image         String?
  role          Role      @default(USER)
  // < nao mexer 

  progress UserProgress[] // Track progress p user

  userCursos UserCurso[] // Cursos que o user tÃ¡ cursando
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sessions   Session[]
  accounts   Account[]

  // PFA-based skill tracking
  skillStates  UserSkillState[]
  attempts     UserAttempt[]

  @@map("user")
}

model Curso {
  id                    String @id @default(uuid()) @map("_id")
  name                  String
  descricao             String
  tags                  String[]
  slug                  String @unique

  materiasRelacionadas  CursoMateriaRelacionada[]
  cursoTopicos          CursoTopico[]
  userCursos            UserCurso[]
}

model CursoTopico {
  id    String @id @default(uuid()) @map("_id")
  order Int    @default(0)

  curso   Curso  @relation(fields: [cursoId], references: [id])
  cursoId String

  topico   Topico @relation(fields: [topicoId], references: [id])
  topicoId String

  @@unique([cursoId, topicoId])
}

model CursoMateriaRelacionada {
  id String @id @default(uuid()) @map("_id")

  curso   Curso  @relation(fields: [cursoId], references: [id])
  cursoId String

  materia   Materia @relation(fields: [materiaId], references: [id])
  materiaId String

  @@unique([cursoId, materiaId])
}

model UserCurso {
  id        String  @id @default(uuid()) @map("_id")
  completed Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  curso   Curso  @relation(fields: [cursoId], references: [id])
  cursoId String

  dataMatricula DateTime @default(now())

  @@unique([userId, cursoId])
}

model Materia {
  id                 String                    @id @default(uuid()) @map("_id")
  name               String
  descricao          String
  cor                String
  slug               String                    @unique
  imgUrl             String
  tags               String[]
  topicos            Topico[]
  cursosRelacionados CursoMateriaRelacionada[]
  skills             Skill[]                   // Add missing relation
}

model Topico {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  descricao String
  slug      String   @unique
  archived  Boolean? @default(false)

  materia      Materia        @relation(fields: [materiaId], references: [id])
  materiaId    String
  topicoLessons TopicoLesson[]
  userProgress UserProgress[]
  cursoTopicos CursoTopico[]
}

model Lesson {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  descricao String
  type      LessonType @default(GERAL)
  archived  Boolean @default(false)
  
  knowledgeComponents String[] // Skills this lesson teaches
  prerequisites       String[] // Required skill IDs
  difficulty         Float     @default(1.0) // Continuous difficulty scale
  estimatedDuration  Int      // in minutes
  
  // Learning objectives with weights
  learningObjectives LessonObjective[]

  contentPages    ContentPage[]
  lessonVariants    LessonVariant[]
  
  topicoLessons     TopicoLesson[]
  userProgress     UserProgress[]
  userAttempts     UserAttempt[]
}

model TopicoLesson {
  id    String @id @default(uuid()) @map("_id")
  order Int    @default(0)

  topico   Topico @relation(fields: [topicoId], references: [id])
  topicoId String
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  lessonId  String

  @@unique([topicoId, lessonId])
}

// MISSING MODEL: Variants for A/B testing, difficulty levels
model LessonVariant {
  id          String @id @default(uuid()) @map("_id")
  name        String
  description String?
  isDefault   Boolean @default(false)
  
  lesson   Lesson  @relation(fields: [lessonId], references: [id])
  lessonId String
  
  // Each variant can have its own content pages
  contentPages ContentPage[]
  
  // For A/B testing
  weight      Int @default(100) // Probability weight for selection
  isActive    Boolean @default(true)
}

model ContentPage {
  id       String @id @default(uuid()) @map("_id")
  name     String
  order    Int    @default(0)
  archived Boolean @default(false)
  
  // Flexible parent relationship
  lesson         Lesson?        @relation(fields: [lessonId], references: [id])
  lessonId       String?
  lessonVariant  LessonVariant? @relation(fields: [variantId], references: [id])
  variantId     String?
  
  // Page content blocks
  contentBlocks ContentBlock[]
	@@map("ContentPage")
}

// Individual content blocks within a page
model ContentBlock {
  id       String      @id @default(uuid()) @map("_id")
  type     ContentType
  order    Int         @default(0)
  
  // Content data
  markdown     String?  // For markdown content with LaTeX support
  videoUrl     String?  // For video content
  metadata     Json?    // Flexible metadata for different content types
  
  // Interactive components
  componentType ComponentType?
  componentPath String?         // Path to React component
  componentProps Json?          // Props for the component
  
  // Exercise/Assessment specific
  exerciseData Json?    // Questions, answers, validation rules
  
  page     ContentPage @relation(fields: [pageId], references: [id])
  pageId   String
  
  archived Boolean @default(false)
}

// Define learning objectives with weights for PFA
model LessonObjective {
  id       String @id @default(uuid()) @map("_id")
  weight   Float  @default(1.0) // How much this objective contributes to overall skill
  
  lesson   Lesson  @relation(fields: [lessonId], references: [id])
  lessonId String
  
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String
  
  @@unique([lessonId, skillId])
}

// Enhanced skill model for PFA
model Skill {
  id          String @id @default(uuid()) @map("_id")
  name        String
  description String
  slug        String @unique
  
  // Skill relationships for transfer learning
  prerequisites  SkillDependency[] @relation("PrerequisiteSkill")
  dependents     SkillDependency[] @relation("DependentSkill")
  
  // PFA parameters (learned from data)
  baseDifficulty Float @default(0.0)    // Base difficulty parameter
  
  materia   Materia @relation(fields: [materiaId], references: [id])
  materiaId String
  
  // Related content
  lessonObjectives LessonObjective[]
  userSkillStates  UserSkillState[]
}

// Model skill dependencies for cross-skill learning
model SkillDependency {
  id             String @id @default(uuid()) @map("_id")
  transferWeight Float  @default(0.3) // How much mastery transfers between skills
  
  prerequisite   Skill  @relation("PrerequisiteSkill", fields: [prerequisiteId], references: [id])
  prerequisiteId String
  
  dependent      Skill  @relation("DependentSkill", fields: [dependentId], references: [id])
  dependentId    String
  
  @@unique([prerequisiteId, dependentId])
}

// PFA-based user skill tracking
model UserSkillState {
  id     String @id @default(uuid()) @map("_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String

  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, skillId])
}

// UserAttempt is the canonical DKT input: each row is a step in the sequence
model UserAttempt {
  id        String   @id @default(uuid()) @map("_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  lesson     Lesson    @relation(fields: [lessonId], references: [id])
  lessonId   String

  // Attempt details
  skillsTested     String[]  // Skills involved in this attempt
  isCorrect        Boolean
  responseTime     Int       // Time in milliseconds
  hintsUsed        Int       @default(0)
  attemptsToSolve  Int       @default(1)

  // Context for better modeling
  difficulty       Float     // Difficulty at time of attempt
  sessionPosition  Int       // Position in current learning session
  timeOfDay        Int       // Hour of day (0-23) for circadian effects

  // DKT-friendly: group attempts into sessions
  sessionId        String?   // For DKT: group attempts into sessions

  // Feature extraction (optional, can be ignored by DKT)
  priorKnowledge   Json      // Knowledge state before attempt
  posteriorKnowledge Json    // Updated knowledge state after attempt

  createdAt DateTime @default(now())
}

// Enhanced user progress with PFA integration
model UserProgress {
  id     String @id @default(uuid()) @map("_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String

  lesson   Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId String?

  topico   Topico? @relation(fields: [topicoId], references: [id])
  topicoId String?

  completed Boolean @default(false)
  
  // PFA-enhanced progress tracking
  overallMastery    Float   @default(0.0)  // Weighted average of skill masteries
  totalTimeSpent    Int     @default(0)    // Time in seconds
  efficiencyScore   Float   @default(0.0)  // Learning efficiency metric
  
  // Adaptive parameters
  recommendedDifficulty Float @default(1.0)
  nextReviewDate       DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId, topicoId])
}

// evitar mexer daqui pra baixo:
model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}