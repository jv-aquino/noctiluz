generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  SCHOOL_TEACHER
  SCHOOL_ADMIN
}

enum LessonType {
  GENERAL
  EXERCISE
  REVIEW
  SIMULATION
}

enum ContentType {
  MARKDOWN
  VIDEO
  INTERACTIVE_COMPONENT
  EXERCISE
  SIMULATION
  ASSESSMENT
}

enum ComponentType {
  SIMULATION
  QUIZ
  DRAG_DROP
  CODE_EDITOR
  MATH_PLAYGROUND
  INTERACTIVE_GRAPH
  ANIMATION
}

enum ExerciseType {
  MULTIPLE_CHOICE
  VALUE
  MULTIPLE
  ASSOCIATION
  ORDERING
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean?
  image         String?
  role          UserRole      @default(USER)

  progress UserProgress[]
  userCourses UserCourse[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sessions   Session[]
  accounts   Account[]

  skillStates      UserSkillState[]
  attempts         UserAttempt[]
  exerciseAttempts ExerciseAttempt[]

  @@map("user")
}

model Course {
  id                    String @id @default(uuid()) @map("_id")
  name                  String
  description           String
  tags                  String[]
  slug                  String @unique
  backgroundImage       String?

  relatedSubjects  CourseSubjectRelation[]
  courseTopics          CourseTopic[]
  userCourses            UserCourse[]
}

model CourseTopic {
  id    String @id @default(uuid()) @map("_id")
  order Int    @default(0)

  course   Course  @relation(fields: [courseId], references: [id])
  courseId String

  topic   Topic @relation(fields: [topicId], references: [id])
  topicId String

  @@unique([courseId, topicId])
}

model CourseSubjectRelation {
  id String @id @default(uuid()) @map("_id")

  course   Course  @relation(fields: [courseId], references: [id])
  courseId String

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  @@unique([courseId, subjectId])
}

model UserCourse {
  id        String  @id @default(uuid()) @map("_id")
  completed Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  course   Course  @relation(fields: [courseId], references: [id])
  courseId String

  enrollmentDate DateTime @default(now())

  @@unique([userId, courseId])
}

model Subject {
  id                 String                    @id @default(uuid()) @map("_id")
  name               String
  description        String
  color              String
  slug               String                    @unique
  imageUrl           String
  tags               String[]
  topics             Topic[]
  relatedCourses     CourseSubjectRelation[]
  skills             Skill[]
}

model Topic {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  description String
  slug        String   @unique
  archived    Boolean? @default(false)

  subject      Subject        @relation(fields: [subjectId], references: [id])
  subjectId    String
  topicLessons TopicLesson[]
  userProgress UserProgress[]
  courseTopics CourseTopic[]
}

model Lesson {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  description String
  type      LessonType @default(GENERAL)
  archived  Boolean @default(false)

  identifier          String @default("")   // Invisible for users, used for selection purposes in the admin dashboard 
  
  knowledgeComponents String[] // Skills this lesson teaches
  prerequisites       String[] // Required skill IDs
  difficulty         Float     @default(1.0) // Continuous difficulty scale
  estimatedDuration  Int      // in minutes
  
  learningObjectives LessonObjective[]

  contentPages    ContentPage[]
  lessonVariants    LessonVariant[]
  
  topicLessons     TopicLesson[]
  userProgress     UserProgress[]
  userAttempts     UserAttempt[]
}

model TopicLesson {
  id    String @id @default(uuid()) @map("_id")
  order Int    @default(0)

  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId String
  lesson  Lesson  @relation(fields: [lessonId], references: [id])
  lessonId  String

  @@unique([topicId, lessonId])
}

model LessonVariant {
  id          String @id @default(uuid()) @map("_id")
  name        String
  description String?
  isDefault   Boolean @default(false)
  
  slug        String?      @unique
  
  lesson   Lesson  @relation(fields: [lessonId], references: [id])
  lessonId String
  
  contentPages ContentPage[]
  
  weight      Int @default(100) // Probability weight for selection
  isActive    Boolean @default(true)
}

model University {
  id            String        @id @default(uuid()) @map("_id")
  name          String
  nickname      String
  description   String?
  country       String?
  state         String?

  exercises    Exercise[]
}

model Exercise {
  id            String        @id @default(uuid()) @map("_id")
  name          String
  markdown      String
  universityId String?
  university   University? @relation(fields: [universityId], references: [id])
  type           ExerciseType  @default(MULTIPLE_CHOICE)
  archived       Boolean       @default(false)

  alternatives  Json?
  correctValue  String?
  
  skillsTested  String[]      // Skills this exercise evaluates
  difficulty    Float         @default(1.0)
  estimatedTime Int          @default(5) // minutes
  tags          String[]      @default([])
  
  exerciseObjectives ExerciseObjective[]
  
  exerciseAttempts ExerciseAttempt[]
  
  contentBlocks    ContentBlock[]
}

model ContentPage {
  id       String @id @default(uuid()) @map("_id")
  name     String
  order    Int    @default(0)
  archived Boolean @default(false)
  
  lesson         Lesson?        @relation(fields: [lessonId], references: [id])
  lessonId       String?
  lessonVariant  LessonVariant? @relation(fields: [variantId], references: [id])
  variantId     String?
  
  contentBlocks ContentBlock[]
  @@map("ContentPage")
}

model ContentBlock {
  id       String      @id @default(uuid()) @map("_id")
  type     ContentType
  order    Int         @default(0)
  
  markdown     String?  // For markdown content with LaTeX support
  videoUrl     String?  // For video content
  metadata     Json?    // Flexible metadata for different content types
  
  componentType ComponentType?
  componentPath String?         // Path to React component
  componentProps Json?          // Props for the component
  
  exerciseData Json?    // Questions, answers, validation rules
  
  exercise     Exercise? @relation(fields: [exerciseId], references: [id])
  exerciseId   String?
  
  page     ContentPage @relation(fields: [pageId], references: [id])
  pageId   String
  
  archived Boolean @default(false)
}

model LessonObjective {
  id       String @id @default(uuid()) @map("_id")
  weight   Float  @default(1.0) // How much this objective contributes to overall skill
  
  lesson   Lesson  @relation(fields: [lessonId], references: [id])
  lessonId String
  
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String
  
  @@unique([lessonId, skillId])
}

model ExerciseObjective {
  id       String @id @default(uuid()) @map("_id")
  weight   Float  @default(1.0) // How much this exercise contributes to skill assessment
  
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String
  
  @@unique([exerciseId, skillId])
}

model Skill {
  id          String @id @default(uuid()) @map("_id")
  name        String
  description String
  slug        String @unique
  
  prerequisites  SkillDependency[] @relation("PrerequisiteSkill")
  dependents     SkillDependency[] @relation("DependentSkill")
  
  baseDifficulty Float @default(0.0)
  
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String
  
  lessonObjectives   LessonObjective[]
  exerciseObjectives ExerciseObjective[]
  userSkillStates    UserSkillState[]
}

model SkillDependency {
  id             String @id @default(uuid()) @map("_id")
  transferWeight Float  @default(0.3)
  
  prerequisite   Skill  @relation("PrerequisiteSkill", fields: [prerequisiteId], references: [id])
  prerequisiteId String
  
  dependent      Skill  @relation("DependentSkill", fields: [dependentId], references: [id])
  dependentId    String
  
  @@unique([prerequisiteId, dependentId])
}

model UserSkillState {
  id     String @id @default(uuid()) @map("_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String

  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, skillId])
}

model UserAttempt {
  id        String   @id @default(uuid()) @map("_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  lesson     Lesson    @relation(fields: [lessonId], references: [id])
  lessonId   String

  skillsTested     String[]
  isCorrect        Boolean
  responseTime     Int
  hintsUsed        Int       @default(0)
  attemptsToSolve  Int       @default(1)

  difficulty       Float
  sessionPosition  Int
  timeOfDay        Int

  sessionId        String?

  priorKnowledge   Json
  posteriorKnowledge Json

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([sessionId, sessionPosition])
}

model ExerciseAttempt {
  id        String   @id @default(uuid()) @map("_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId String

  userAnswer       Json
  isCorrect        Boolean
  partialCredit    Float?
  responseTime     Int
  hintsUsed        Int       @default(0)
  attemptsToSolve  Int       @default(1)

  skillsTested     String[]
  difficulty       Float
  sessionPosition  Int
  timeOfDay        Int
  sessionId        String?

  priorKnowledge   Json
  posteriorKnowledge Json

  context         String?
  lessonId        String?
  contentBlockId  String?

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([exerciseId, isCorrect])
  @@index([sessionId, sessionPosition])
}

model UserProgress {
  id     String @id @default(uuid()) @map("_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String

  lesson   Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId String?

  topic   Topic? @relation(fields: [topicId], references: [id])
  topicId String?

  completed Boolean @default(false)
  overallMastery    Float   @default(0.0)
  totalTimeSpent    Int     @default(0)
  efficiencyScore   Float   @default(0.0)
  recommendedDifficulty Float @default(1.0)
  nextReviewDate       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId, topicId])
  @@index([userId, completed])
  @@index([topicId, completed])
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}