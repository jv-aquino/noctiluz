// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid()) @map("_id")
  name            String
  email           String    @unique
  emailVerified   DateTime?             // requerido pelo NextAuth
  image           String?               // requerido pelo NextAuth
  role            String    @default("user")

  accounts        Account[]             // requerido pelo NextAuth
  sessions        Session[]             // requerido pelo NextAuth
}

model Materia {
  id              String   @id @default(uuid()) @map("_id")
  name            String
  descricao       String
  slug            String   @unique
  
  materiaTopico   MateriaTopico[]
}

model MateriaTopico {
  id              String   @id @default(uuid()) @map("_id")
  order           Int       @default(0) 
  materia         Materia @relation(fields: [materiaId], references: [id])
  materiaId       String
  topico          Topico @relation(fields: [topicoId], references: [id])
  topicoId        String
}

model Topico {
  id              String    @id @default(uuid()) @map("_id")
  name            String
  descricao       String
  slug            String    @unique
  archived        Boolean?  @default(false)

  materiaTopico   MateriaTopico[]
  topicoLicoes    TopicoLicao[]  // Many-to-Many relation
}

model Licao {
  id            String   @id @default(uuid()) @map("_id")
  name          String
  descricao     String
  archived      Boolean?  @default(false)

  conteudo      Conteudo[]
  topicoLicoes  TopicoLicao[]
}

model TopicoLicao {
  id        String @id @default(uuid()) @map("_id")
  order     Int    @default(0)

  topico    Topico @relation(fields: [topicoId], references: [id])
  topicoId  String
  licao     Licao @relation(fields: [licaoId], references: [id])
  licaoId   String


  @@unique([topicoId, licaoId])
}

model Conteudo {
  id              String    @id @default(uuid()) @map("_id")
  name            String
  type            String    
  markdown        String
  order           Int       @default(0) 
  archived        Boolean?  @default(false)

  licao         Licao?   @relation(fields: [licaoId], references: [id])
  licaoId       String?
}

model Exercicio {
  id            String   @id @default(uuid()) @map("_id")
  name          String
  descricao     String
}

// next auth stuff
model Account {
  id                 String   @id @default(uuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
}