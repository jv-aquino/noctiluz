generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid()) @map("_id")
  name            String
  email           String    @unique
  emailVerified   DateTime?             
  image           String?               
  role            String    @default("user")

  accounts        Account[]             
  sessions        Session[]             
  progress        UserProgress[]        // Track progress p user

  userCursos      UserCurso[]           // Cursos que o user t√° cursando
}

model Curso {
  id              String          @id @default(uuid()) @map("_id")
  name            String
  descricao       String
  slug            String          @unique

  cursoTopicos    CursoTopico[]
  userCursos      UserCurso[]
}

model CursoTopico {
  id        String @id @default(uuid()) @map("_id")
  order     Int    @default(0)

  curso     Curso  @relation(fields: [cursoId], references: [id])
  cursoId   String

  topico    Topico @relation(fields: [topicoId], references: [id])
  topicoId  String

  @@unique([cursoId, topicoId])
}

model UserCurso {
  id            String  @id @default(uuid()) @map("_id")
  completed     Boolean @default(false)
  user          User    @relation(fields: [userId], references: [id])
  userId        String

  curso         Curso   @relation(fields: [cursoId], references: [id])
  cursoId       String

  dataMatricula DateTime @default(now())
  
  @@unique([userId, cursoId])
}

model Materia {
  id              String   @id @default(uuid()) @map("_id")
  name            String
  descricao       String
  cor             String
  slug            String   @unique
  topicos         Topico[]
}

model Topico {
  id              String    @id @default(uuid()) @map("_id")
  name            String
  descricao       String
  slug            String    @unique
  archived        Boolean?  @default(false)

  materia         Materia @relation(fields: [materiaId], references: [id])
  materiaId       String
  topicoLicoes    TopicoLicao[]  

  userProgress UserProgress[]
  cursoTopicos    CursoTopico[] 
}

model Licao {
  id            String   @id @default(uuid()) @map("_id")
  name          String
  descricao     String
  archived      Boolean?  @default(false)

  conteudo      Conteudo[]
  topicoLicoes  TopicoLicao[]

  userProgress UserProgress[]
}

model TopicoLicao {
  id        String @id @default(uuid()) @map("_id")
  order     Int    @default(0)

  topico    Topico @relation(fields: [topicoId], references: [id])
  topicoId  String
  licao     Licao @relation(fields: [licaoId], references: [id])
  licaoId   String

  @@unique([topicoId, licaoId])
}

model Conteudo {
  id              String    @id @default(uuid()) @map("_id")
  name            String
  type            String    
  markdown        String
  order           Int       @default(0) 
  archived        Boolean?  @default(false)

  licao         Licao?   @relation(fields: [licaoId], references: [id])
  licaoId       String?
}

model UserProgress {
  id             String    @id @default(uuid()) @map("_id")
  user           User      @relation(fields: [userId], references: [id])
  userId         String

  licao          Licao?    @relation(fields: [licaoId], references: [id])
  licaoId        String?

  topico         Topico?   @relation(fields: [topicoId], references: [id])
  topicoId       String?

  completed      Boolean   @default(false)

  @@unique([userId, licaoId, topicoId]) // Track each user's progress uniquely
}

model Account {
  id                 String   @id @default(uuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
}